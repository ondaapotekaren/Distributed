# FEEL FREE TO CHANGE THE CODE. 
# This is just a dull example

# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# Also star leader election after 5 second 
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try:   
    listencommhandle = waitforconn(ip, port, board_connection_handler)  
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# --> Important starting point
# ------------------------------------------------------------------------------    
def board_connection_handler(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    print '****Request:\n%s' % msgheader
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    #----From the browser----
    if msgheader.startswith( 'GET' ):
      get_board_handler(msgheader, sockobj, thiscommhandle)    

    #----Add entry(sent from browser)----
    elif msgheader.startswith( 'POST /board' ):
      query = extract_http_request_contents(msgheader)
      parameters = extract_parameters_from_query(query)
      mycontext['id'] = mycontext['id'] + 1 
      add_entry(parameters['entry'],mycontext['id'])
			send_to_vessels(parameters['entry'],mycontext['id'],1,3)
      res=make_http_response(200,'OK','')
      sockobj.send(res)
      stopcomm(thiscommhandle)
      
    #----Delete or Modify entry(sent from browser)---- 
    elif msgheader.startswith( 'POST /entries' ):
      query = extract_http_request_contents(msgheader)
      parameters = extract_parameters_from_query(query)
      entryID = msgheader.split('/')[2].split(' ')[0]
      #----Delete or modify entry on the board if leader, otherwise send message to leader
      if parameters['delete']==str(1):
        delete_entry(entryID)
        send_to_vessels("", entryID, 2,10)
      elif parameters['delete']==str(0): 
        modify_entry(parameters['entry'], entryID)
        send_to_vessels(parameters['entry'], entryID, 3,3) 
      res = make_http_response(200,'OK','')
      sockobj.send(res)
      stopcomm(thiscommhandle)

     #----Receive add from vessels and update board----  
    elif msgheader.startswith( 'POST /neighbour/entries' ):
      query = extract_http_request_contents(msgheader)
      parameters = extract_parameters_from_query(query)
      entry=parameters['entry']
      entryID=parameters['entryID']
			prio=parameters['prio']
			if entryID <= mycontext['id']:
				if prio > mycontext[]:
					# how to move entries? 
					
					
			else: 
      add_entry(entry,int(entryID)) 

    #----Receive delete from vessels and update board-----
    elif msgheader.startswith( 'POST /neighbour/delete' ):
      query = extract_http_request_contents(msgheader)
      parameters = extract_parameters_from_query(query)
      delete_entry(parameters['entryID'])

    #----Receive modify from vessels and update board-----
    elif msgheader.startswith( 'POST /neighbour/modify' ):
      query = extract_http_request_contents(msgheader)
      parameters = extract_parameters_from_query(query)
      entry = parameters['entry']
      entryID = parameters['entryID']
      modify_entry(entry, entryID)
    else:
      other_requests_handler(msgheader, sockobj, thiscommhandle)

  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_board_handler(msgheader, sockobj, thiscommhandle):
  htmlresponse = generate_html_page()
  res=make_http_response(200, 'OK', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle) 

# ------------------------------------------------------------------------------
# Update entries on the board using mycontext['ids'] as helper to loop 
# through the hash 
# ---------------------------------------------------------------------------
def update_entries():
  mycontext['entries']=""
  for entryID in mycontext['ids']:
    entryFormat  = mycontext['entry_template'] %('entries/%d' % (entryID), entryID, mycontext['idhash'][entryID])
    mycontext['entries'] = ''.join( [ mycontext['entries'], entryFormat] )

# ------------------------------------------------------------------------------
# Add entries to hash then call update 
# ---------------------------------------------------------------------------
def add_entry(entry,entryID):
  mycontext['id'] = int(entryID)
  mycontext['ids'].append(mycontext['id']) 
  mycontext['idhash'][mycontext['id']]= entry 
  update_entries()

# ------------------------------------------------------------------------------
# Delete entries from hash then call update 
# ---------------------------------------------------------------------------
def delete_entry(entryID):
  if int(entryID) in mycontext['ids']:
    del mycontext['idhash'][int(entryID)]
    mycontext['ids'].remove(int(entryID))
    update_entries()

# ------------------------------------------------------------------------------
# Modify entries in the hash then call update  
# --------------------------------------------------------------------------
def modify_entry(entry,entryID):
  mycontext['idhash'][int(entryID)] = entry
  update_entries()

# ------------------------------------------------------------------------------
# Get entries 
# --------------------------------------------------------------------------
def get_entry(entryID):
	return mycontext['idhash'][int(entryID)]

# ------------------------------------------------------------------------------
# Update entries recursively   
# --------------------------------------------------------------------------
def update_entry(entry,entryID):
	if(entryID <= mycontext['id']):
		moveEntry = get_entry(entryID)
		modify_entry(entry,entryID)
		update_entry(moveEntry,entryID+1)
	else: 
		add_entry(entry,entryID+1)
		
# ------------------------------------------------------------------------------
# Send message to other vessels. Try as many times as specified by testnmbr 
# action = 1 : Insert  
# action = 2 : Delete
# action = 3 : Modify
# ----------------------------------------------------------------------------  

def send_to_vessels(entry,entryID,action,testnmbr):
  for sock in mycontext['vessels']:
    send_to_vessel(entry,entryID,action,testnmbr,sock)

def send_to_vessel(entry,entryID,action,testnmbr,sock):
  try:
    if action == 1: 
      socketobject = openconn(sock[0],int(sock[1]))
      http_res = make_http_response(200,'OK', "entry="+entry+"&entryID="+str(entryID)"&prio="+mycontext['identifier'])
      send_object = 'POST /neighbour/entries ' + http_res
    elif action == 2:   
      socketobject = openconn(sock[0],int(sock[1]))    
      http_res = make_http_response(200,'OK',"entryID="+str(entryID))
      send_object = 'POST /neighbour/delete ' + http_res
    elif action == 3:
      socketobject = openconn(sock[0],int(sock[1]))
      http_res = make_http_response(200, 'OK',"entry="+entry+"&entryID="+str(entryID))
      send_object = 'POST /neighbour/modify' + http_res 
    socketobject.send(send_object)
    socketobject.close()
  except:
    if(testnmbr != 0):
      send_to_vessel(entry,entryID,action,testnmbr-1,sock)
    else:
      if mycontext['global']:
        print "error in connection to vessel: " + sock[0]
      else:
        print "error in connection to vessel: " + sock[1]

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def other_requests_handler(msgheader, sockobj, thiscommhandle):
  # extract the query from the HTTP request  
  query = extract_http_request_contents(msgheader)
  print query
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  print parameters
  print parameters['entry']
  
  # Do not mix HTML code with the server code as done here. This is a bad practice
  template=file("no_answer_template.html").read()
  htmlresponse = template % ("404 Not Found\n" + msgheader)
  res=make_http_response(404, 'Not Found', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle) 

# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse):
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-Length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  conent_length = header.split('Content-Length: ')[1]
  conent_length = int(conent_length.split('\r\n')[0])
  
  # extract the http response body and discard the header
  contetns = header[-conent_length:]
  return contetns

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ip=127.0.0.1&port=63101&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters

# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():
  
  # dynamic title showing Ip address, port and up time. 
  title='Sample board @ %s:%d. Up time: %d Leader: %s My random: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()),mycontext['leader'], mycontext['random'] )
  content = mycontext['boardcontents_template'] %( title, mycontext['entries'] )
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entries, content, fullpage
  return fullpage
  
# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")
  
  #Global variable for entries
  mycontext['entries'] = ""
  
  #Count entries 
  mycontext['id'] = 0
  
  #Vessels on the same network
  #'ids' is used for looping the hash   
  mycontext['ids'] = []
  idhash = {}
  mycontext['idhash'] = idhash 

  # Other vessels to send to 
  mycontext['vessels'] = []

  # Ring-topology for electing leader 
  mycontext['ring'] = []

  mycontext['random'] = int(10000*randomfloat())
  mycontext['stoplock'] = getlock()


  # Used to simplify global/local testing 
  mycontext['global'] = False

  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip
  
  #Either unique port or ip-address
  mycontext['identifier']=''
	

	#Read ports(locally) or ip-addresses(globally)
	#from a file  
  if mycontext['global']:
    vessels = file("neighborlist.txt").read().split()
    mycontext['identifier'] = str(ip) 
    for line in vessels: 
      mycontext['ring'].append(line)
      if(ip != line):
        mycontext['vessels'].append((line,mycontext['port']))
  else:
    vessels = file("localports.txt").read().split()
    mycontext['identifier'] = str(port)
    for line in vessels:
      mycontext['ring'].append(line)
      if(str(port) != line):
        mycontext['vessels'].append((mycontext['ip'],line))

  #read html template files
  mycontext['entry_template'] = file("entry_template.html").read()
  mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
  mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
  mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()

  mycontext['authors'] = "sample author"

  start_board()
  
